Methods:

//methods = a block of code that is executed whenever it is called upon

public class Main {
    public static void main(String[] args) {

        String name = "Bro";
        int age = 21;
        hello(name,age);

    }

    static void hello(String title, int number) {
        System.out.println("hello "+title);
        System.out.println("you are " +number);
    }


}

returning a method:

//when returning a method don't include void as it doesn't ever return

public class Main {
    public static void main(String[] args) {
        int x = 21;
        int y = 43;


        System.out.println(add(x,y));
    }

    static int add(int x, int y) {

        int z = x + y;
        return z;
    }

}

overloading methods:

//overloaded methods = methods that have the same name but different parameter
//method name + parameters = method signature or unique concept to this method

public class Main {
    public static void main(String[] args) {

        int x = add(1,2, 3);
        double y = add(1.0,2.0,3.0);

        System.out.println(x);
        System.out.println(y);
    }

    static int add(int a, int b) {
        System.out.println("This is overloaded method #1");
        return a + b;
    }
    static int add(int a, int b, int c) {
        System.out.println("This is overloaded method #2");
        return a + b + c;
    }
    static int add(int a, int b, int c, int d) {
        System.out.println("This is overloaded method #3");
        return a + b + c + d;
    }

    static double add(double a, double b) {
        System.out.println("This is overloaded method #4");
        return a + b;
    }
    static double add(double a, double b, double c) {
        System.out.println("This is overloaded method #5");
        return a + b + c;
    }
    static double add(double a, double b, double c, double d) {
        System.out.println("This is overloaded method #6");
        return a + b + c + d;
    }

}

Overriding Methods:
main class---
//Method Overriding = Declaring a method in sub class,
//                    which is already present in parent class
//                    done so that a child class can give its own implementation

public class Main {
    public static void main (String[] args) {

        Animal animal = new Animal();
        animal.speak();

        Dog dog = new Dog();

        dog.speak();

    }
}
Animal class---
public class Animal {
    void speak() {
        System.out.println("The animal is speaking");
    }
}
Dog class---
//this method is overriding the one in Animal
//if we deleted the override in this class,
//it would use the one in animal when you call
//the dog.speak
public class Dog extends Animal {

    @Override
    void speak() {
        System.out.println("The dog goes bark");
    }
}

Overriding toString Method:
main class---
//toString() = special method that all objects inherit,
//              that returns a string that "textually represents" an object.
//              can be used both implicitly and explicitly

public class Main {
    public static void main (String[] args) {
        car Car = new car();


        System.out.println(Car.toString());
        //System.out.println(Car);
    }
}
car class---
//Overriding toString method like this:
//
// public String toString() {
//
//        String myString = year+"\n"+make+"\n"+model+"\n"+color;
//        return myString;
//}
//-----------------------------------------------------
// or this:
//public String toString() {
//
//        return year+"\n"+make+"\n"+model+"\n"+color;
//}

public class car {
    String year = "2021";
    String make = "Toyota";
    String model = "Tacoma";
    String color = "Grey";

    public String toString() {

        return year+"\n"+make+"\n"+model+"\n"+color;
    }
}

